// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum FileType {
  IMAGE
  DOCUMENT
}

enum AdminType {
  SUPER_ADMIN
  KADER
}

enum BMIStatus {
  MALNUTRITION
  UNDERNUTRITION
  NORMAL
  OVERWEIGHT
  OBESITY
}

enum CheckupStatus {
  VERIFIED
  UNVERIFIED
}

enum Gender {
  MALE
  FEMALE
}

enum StatusBlood {
  DONE
  NOT_DONE
}

enum OwnerType {
  ADMIN
  PUBLIC
}

model User {
  id           String     @id @unique @default(uuid())
  name         String
  phone        String
  pin          String
  address      String?
  dateOfBirth  DateTime?
  placeOfBirth String?
  status       UserStatus @default(INACTIVE)

  userPictureId String?
  userPicture   File?   @relation(fields: [userPictureId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Otp      Otp[]
  Elderly  Elderly[]
  Children Children[]
  Mother   Mother[]
}

model Admin {
  id       String    @id @unique @default(uuid())
  name     String
  email    String
  password String
  phone    String
  type     AdminType

  healthPostId String?
  healthPost   HealthPost? @relation(fields: [healthPostId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Otp             Otp[]
  CheckupElderly  CheckupElderly[]
  Article         Article[]
  Schedule        Schedule[]
  BloodRecord     BloodRecord[]
  BloodSupplement BloodSupplement[]
  CheckupMother   CheckupMother[]
  CheckupChildren CheckupChildren[]
}

model Children {
  id           String   @id @unique @default(uuid())
  name         String
  dateOfBirth  DateTime
  placeOfBirth String
  childOrder   Int
  bloodType    String?
  height       Float
  weight       Float
  address      String
  gender       Gender
  code         String?  @unique

  userId             String
  user               User    @relation(fields: [userId], references: [id])
  motherId           String
  mother             Mother  @relation(fields: [motherId], references: [id])
  childPictureId     String?
  childPicture       File?   @relation("ChildPicture", fields: [childPictureId], references: [id])
  birthCertificateId String?
  birthCertificate   File?   @relation("BirthCertificate", fields: [birthCertificateId], references: [id])
  kiaCardId          String?
  kiaCard            File?   @relation("KiaCard", fields: [kiaCardId], references: [id])
  familyCardId       String?
  familyCard         File?   @relation("FamilyCard", fields: [familyCardId], references: [id])

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  CheckupChildren CheckupChildren[]
}

model CheckupChildren {
  id                String        @id @unique @default(uuid())
  height            Float
  weight            Float
  headCircumference Float
  gender            Gender
  bmi               Float
  bmiStatus         BMIStatus
  status            CheckupStatus @default(UNVERIFIED)

  childrenId      String
  children        Children   @relation(fields: [childrenId], references: [id])
  adminId         String
  admin           Admin      @relation(fields: [adminId], references: [id])
  healthPostId    String
  healthPost      HealthPost @relation(fields: [healthPostId], references: [id])
  fileDiagnosedId String?
  fileDiagnosed   File?      @relation("FileDiagnosedChildren", fields: [fileDiagnosedId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Mother {
  id           String   @id @unique @default(uuid())
  name         String
  dateOfBirth  DateTime
  placeOfBirth String
  address      String
  code         String?  @unique

  userId        String
  user          User        @relation(fields: [userId], references: [id])
  subDistrictId String
  subDistrict   SubDistrict @relation(fields: [subDistrictId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Children        Children[]
  BloodRecord     BloodRecord[]
  BloodSupplement BloodSupplement[]
  BloodStep       BloodStep[]
  CheckupMother   CheckupMother[]
}

model MonthBlood {
  id   String @id @unique @default(uuid())
  name String

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  BloodSupplement BloodSupplement[]
  BloodRecord     BloodRecord[]
}

model BloodRecord {
  id        String   @id @default(uuid())
  date      DateTime
  staffName String?
  staffJob  String?
  note      String?

  adminId    String?
  admin      Admin?     @relation(fields: [adminId], references: [id])
  motherId   String
  mother     Mother     @relation(fields: [motherId], references: [id])
  monthId    String
  monthBlood MonthBlood @relation(fields: [monthId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model BloodSupplement {
  id           String       @id @default(uuid())
  statusBlood  StatusBlood?
  totalConsume Int

  motherId   String?
  mother     Mother?     @relation(fields: [motherId], references: [id])
  adminId    String?
  admin      Admin?      @relation(fields: [adminId], references: [id])
  monthId    String?
  monthBlood MonthBlood? @relation(fields: [monthId], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  BloodStep BloodStep[]
}

model BloodStep {
  id   String   @id @default(uuid())
  date DateTime
  name String
  job  String
  note String

  motherId          String?
  mother            Mother?          @relation(fields: [motherId], references: [id])
  bloodSupplementId String?
  bloodSupplement   BloodSupplement? @relation(fields: [bloodSupplementId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model CheckupMother {
  id                    String        @id @default(uuid())
  type                  OwnerType
  month                 Int
  height                Float
  weight                Float
  upperArmCircumference Float
  fundusMeasurement     Float
  bmi                   Float
  bmiStatus             BMIStatus
  status                CheckupStatus @default(UNVERIFIED)
  location              String?
  publicStaff           String?

  motherId        String
  mother          Mother      @relation(fields: [motherId], references: [id])
  healthPostId    String?
  healthPost      HealthPost? @relation(fields: [healthPostId], references: [id])
  adminId         String?
  admin           Admin?      @relation(fields: [adminId], references: [id])
  fileDiagnosedId String?
  fileDiagnosed   File?       @relation("FileDiagnosedMother", fields: [fileDiagnosedId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Elderly {
  id           String   @id @unique @default(uuid())
  userId       String
  name         String
  gender       Gender
  dateOfBirth  DateTime
  placeOfBirth String
  bloodType    String?
  address      String?

  user User? @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  CheckupElderly CheckupElderly[]
}

model CheckupElderly {
  id           String        @id @default(uuid())
  height       Float
  weight       Float
  bmi          Float
  bloodTension Float
  bloodSugar   Float
  attend       DateTime
  month        Int?
  bmiStatus    BMIStatus?
  status       CheckupStatus @default(UNVERIFIED)

  adminId           String?
  elderlyId         String?
  healthPostId      String?
  lungsConclutionId String?

  healthPost HealthPost? @relation(fields: [healthPostId], references: [id])
  admin      Admin?      @relation(fields: [adminId], references: [id])
  elderly    Elderly?    @relation(fields: [elderlyId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Article {
  id        String @id @unique @default(uuid())
  title     String
  newsMaker String
  content   String

  adminId String?
  admin   Admin?  @relation(fields: [adminId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model HealthPost {
  id      String @id @unique @default(uuid())
  name    String
  address String

  subDistrictId String
  subDistrict   SubDistrict @relation(fields: [subDistrictId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Admin           Admin[]
  CheckupElderly  CheckupElderly[]
  Schedule        Schedule[]
  CheckupMother   CheckupMother[]
  CheckupChildren CheckupChildren[]
}

model Schedule {
  id      String   @id @unique @default(uuid())
  startAt DateTime
  endAt   DateTime
  address String
  note    String?

  staffId      String
  staff        Admin      @relation(fields: [staffId], references: [id])
  healthPostId String
  healthPost   HealthPost @relation(fields: [healthPostId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model SubDistrict {
  id   String @id @unique @default(uuid())
  name String

  districtId String
  district   District @relation(fields: [districtId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  HealthPost HealthPost[]
  Mother     Mother[]
}

model District {
  id   String @id @unique @default(uuid())
  name String

  regencyId String
  regency   Regency @relation(fields: [regencyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  SubDistrict SubDistrict[]
}

model Regency {
  id   String @id @unique @default(uuid())
  name String

  provinceId String
  province   Province @relation(fields: [provinceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  District District[]
}

model Province {
  id   String @id @unique @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Regency Regency[]
}

model File {
  id       String   @id @unique @default(uuid())
  fileName String
  path     String
  mimeType String
  size     Int
  type     FileType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User             User[]
  childPicture     Children[]        @relation("ChildPicture")
  birthCertificate Children[]        @relation("BirthCertificate")
  kiaCard          Children[]        @relation("KiaCard")
  familyCard       Children[]        @relation("FamilyCard")
  CheckupMother    CheckupMother[]   @relation("FileDiagnosedMother")
  CheckupChildren  CheckupChildren[] @relation("FileDiagnosedChildren")
}

model Otp {
  id  String @id @unique @default(uuid())
  otp String

  userId  String?
  user    User?   @relation(fields: [userId], references: [id])
  adminId String?
  admin   Admin?  @relation(fields: [adminId], references: [id])

  createdAt  DateTime @default(now())
  expiresAt  DateTime
  isVerified Boolean  @default(false)
}
