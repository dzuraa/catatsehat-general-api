// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum FileType {
  IMAGE
  DOCUMENT
}

enum AdminType {
  SUPER_ADMIN
  KADER
}

enum BMIStatus {
  MALNUTRITION
  UNDERNUTRITION
  NORMAL
  OVERWEIGHT
  OBESITY
}

enum CheckupStatus {
  VERIFIED
  UNVERIFIED
}

enum Gender {
  MALE
  FEMALE
}

enum StatusBlood {
  DONE
  NOT_DONE
}

enum OwnerType {
  ADMIN
  PUBLIC
}

enum AnswerOption {
  YES
  NO
  NOT_ANSWERED
}

enum HealthStatus {
  HEALTHY
  UNHEALTHY
}

enum ValueLungs {
  VERIFIED
  UNVERIFIED
}

model User {
  id           String     @id @unique @default(uuid())
  name         String
  phone        String
  pin          String
  address      String?
  dateOfBirth  DateTime?
  placeOfBirth String?
  status       UserStatus @default(INACTIVE)

  userPictureId String?
  userPicture   File?   @relation(fields: [userPictureId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  otp      Otp[]
  elderly  Elderly[]
  children Children[]
  mother   Mother[]
  Report   Report[]
}

model Admin {
  id       String    @id @unique @default(uuid())
  name     String
  email    String
  password String
  phone    String
  type     AdminType

  healthPostId String?
  healthPost   HealthPost? @relation(fields: [healthPostId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  otp             Otp[]
  checkupElderly  CheckupElderly[]
  article         Article[]
  schedule        Schedule[]
  bloodRecord     BloodRecord[]
  bloodSupplement BloodSupplement[]
  checkupMother   CheckupMother[]
  checkupChildren CheckupChildren[]
}

model Children {
  id           String   @id @unique @default(uuid())
  name         String
  dateOfBirth  DateTime
  placeOfBirth String
  childOrder   Int
  bloodType    String?
  height       Float
  weight       Float
  address      String
  gender       Gender
  code         String?  @unique

  userId             String
  user               User    @relation(fields: [userId], references: [id])
  motherId           String
  mother             Mother  @relation(fields: [motherId], references: [id])
  childPictureId     String?
  childPicture       File?   @relation("ChildPicture", fields: [childPictureId], references: [id])
  birthCertificateId String?
  birthCertificate   File?   @relation("BirthCertificate", fields: [birthCertificateId], references: [id])
  kiaCardId          String?
  kiaCard            File?   @relation("KiaCard", fields: [kiaCardId], references: [id])
  familyCardId       String?
  familyCard         File?   @relation("FamilyCard", fields: [familyCardId], references: [id])

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  checkupChildren CheckupChildren[]
}

model CheckupChildren {
  id                String        @id @unique @default(uuid())
  height            Float
  weight            Float
  headCircumference Float
  gender            Gender
  bmi               Float
  bmiStatus         BMIStatus
  status            CheckupStatus @default(UNVERIFIED)

  childrenId      String
  children        Children   @relation(fields: [childrenId], references: [id])
  adminId         String
  admin           Admin      @relation(fields: [adminId], references: [id])
  healthPostId    String
  healthPost      HealthPost @relation(fields: [healthPostId], references: [id])
  fileDiagnosedId String?
  fileDiagnosed   File?      @relation("FileDiagnosedChildren", fields: [fileDiagnosedId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Mother {
  id           String   @id @unique @default(uuid())
  name         String
  dateOfBirth  DateTime
  placeOfBirth String
  address      String
  code         String?  @unique

  userId        String
  user          User        @relation(fields: [userId], references: [id])
  subDistrictId String
  subDistrict   SubDistrict @relation(fields: [subDistrictId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Children                  Children[]
  BloodRecord               BloodRecord[]
  BloodSupplement           BloodSupplement[]
  BloodStep                 BloodStep[]
  CheckupMother             CheckupMother[]
  PostPartumRecord          PostPartumRecord[]
  PregnancyMonitoringRecord PregnancyMonitoringRecord[]
}

model MonthBlood {
  id   String @id @unique @default(uuid())
  name String

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  bloodSupplement BloodSupplement[]
  bloodRecord     BloodRecord[]
}

model BloodRecord {
  id        String   @id @default(uuid())
  date      DateTime
  staffName String?
  staffJob  String?
  note      String?

  adminId    String?
  admin      Admin?     @relation(fields: [adminId], references: [id])
  motherId   String
  mother     Mother     @relation(fields: [motherId], references: [id])
  monthId    String
  monthBlood MonthBlood @relation(fields: [monthId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model BloodSupplement {
  id           String       @id @default(uuid())
  statusBlood  StatusBlood?
  totalConsume Int

  motherId   String?
  mother     Mother?     @relation(fields: [motherId], references: [id])
  adminId    String?
  admin      Admin?      @relation(fields: [adminId], references: [id])
  monthId    String?
  monthBlood MonthBlood? @relation(fields: [monthId], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  bloodStep BloodStep[]
}

model BloodStep {
  id   String   @id @default(uuid())
  date DateTime
  name String
  job  String
  note String

  motherId          String?
  mother            Mother?          @relation(fields: [motherId], references: [id])
  bloodSupplementId String?
  bloodSupplement   BloodSupplement? @relation(fields: [bloodSupplementId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model DayPostPartum {
  id        String @id @unique @default(uuid())
  dayNumber Int
  name      String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  PostPartumRecord PostPartumRecord[]
}

model WeekPregnancyMonitoring {
  id         String @id @unique @default(uuid())
  weekNumber Int
  name       String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  PregnancyMonitoringRecord PregnancyMonitoringRecord[]
}

model PostPartumRecord {
  id     String        @id @unique @default(uuid())
  status HealthStatus?

  motherId String
  mother   Mother @relation(fields: [motherId], references: [id])

  dayPostPartumId String
  dayPostPartum   DayPostPartum @relation(fields: [dayPostPartumId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  PostPartumAnswer PostPartumAnswer[]

  // Unique constraint: satu ibu hanya punya satu record per hari
  @@unique([motherId, dayPostPartumId])
}

model PregnancyMonitoringRecord {
  id     String        @id @unique @default(uuid())
  status HealthStatus?

  motherId String
  mother   Mother @relation(fields: [motherId], references: [id])

  weekPregnancyMonitoringId String
  weekPregnancyMonitoring   WeekPregnancyMonitoring @relation(fields: [weekPregnancyMonitoringId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  PregnancyMonitoringAnswer PregnancyMonitoringAnswer[]

  @@unique([motherId, weekPregnancyMonitoringId])
}

model PostPartumQuestion {
  id             String @id @unique @default(uuid())
  questionNumber Int    @unique
  question       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  PostPartumAnswer PostPartumAnswer[]
}

model PregnancyMonitoringQuestion {
  id             String @id @unique @default(uuid())
  questionNumber Int    @unique
  question       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  PregnancyMonitoringAnswer PregnancyMonitoringAnswer[]
}

model PostPartumAnswer {
  id     String       @id @unique @default(uuid())
  answer AnswerOption @default(NOT_ANSWERED)

  postPartumRecordId String
  postPartumRecord   PostPartumRecord @relation(fields: [postPartumRecordId], references: [id])

  postPartumQuestionId String
  postPartumQuestion   PostPartumQuestion @relation(fields: [postPartumQuestionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postPartumRecordId, postPartumQuestionId])
}

model PregnancyMonitoringAnswer {
  id     String       @id @unique @default(uuid())
  answer AnswerOption @default(NOT_ANSWERED)

  pregnancyMonitoringRecordId String
  pregnancyMonitoringRecord   PregnancyMonitoringRecord @relation(fields: [pregnancyMonitoringRecordId], references: [id])

  pregnancyMonitoringQuestionId String
  pregnancyMonitoringQuestion   PregnancyMonitoringQuestion @relation(fields: [pregnancyMonitoringQuestionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([pregnancyMonitoringRecordId, pregnancyMonitoringQuestionId])
}

model CheckupMother {
  id                    String        @id @default(uuid())
  type                  OwnerType
  month                 Int
  height                Float
  weight                Float
  upperArmCircumference Float
  fundusMeasurement     Float
  bmi                   Float
  bmiStatus             BMIStatus
  status                CheckupStatus @default(UNVERIFIED)
  location              String?
  publicStaff           String?

  motherId        String
  mother          Mother      @relation(fields: [motherId], references: [id])
  healthPostId    String?
  healthPost      HealthPost? @relation(fields: [healthPostId], references: [id])
  adminId         String?
  admin           Admin?      @relation(fields: [adminId], references: [id])
  fileDiagnosedId String?
  fileDiagnosed   File?       @relation("FileDiagnosedMother", fields: [fileDiagnosedId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Elderly {
  id           String   @id @unique @default(uuid())
  userId       String
  name         String
  gender       Gender
  dateOfBirth  DateTime
  placeOfBirth String
  bloodType    String?
  address      String?

  user User? @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  checkupElderly CheckupElderly[]
  Lungs          Lungs[]
}

model CheckupElderly {
  id           String        @id @default(uuid())
  height       Float
  weight       Float
  bmi          Float
  bloodTension Float
  bloodSugar   Float
  attend       DateTime
  bmiStatus    BMIStatus?
  status       CheckupStatus @default(UNVERIFIED)

  adminId      String?
  elderlyId    String?
  healthPostId String?
  lungs        String?

  healthPost HealthPost? @relation(fields: [healthPostId], references: [id])
  admin      Admin?      @relation(fields: [adminId], references: [id])
  elderly    Elderly?    @relation(fields: [elderlyId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Lungs {
  id    String     @id @default(uuid())
  value ValueLungs @default(UNVERIFIED)

  elderlyId         String?
  lungsConclutionId String?

  elderly         Elderly?         @relation(fields: [elderlyId], references: [id])
  lungsPivot      LungsPivot[]
  lungsConclution LungsConclution? @relation(fields: [lungsConclutionId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model MasterDataLungs {
  id       String @id @default(uuid())
  question String

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?
  LungsPivot LungsPivot[]
}

model LungsConclution {
  id         String @id @default(uuid())
  conclution String
  value      Float

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Lungs     Lungs[]
}

model LungsPivot {
  id    String  @id @default(uuid())
  value Boolean

  lungsId           String?
  masterDataLungsId String?

  lungs           Lungs?           @relation(fields: [lungsId], references: [id])
  masterDataLungs MasterDataLungs? @relation(fields: [masterDataLungsId], references: [id])
}

model Article {
  id        String @id @unique @default(uuid())
  title     String
  newsMaker String
  content   String

  adminId String?
  admin   Admin?  @relation(fields: [adminId], references: [id])

  filePictureId String?
  filePicture   File?   @relation("ArticlePicture", fields: [filePictureId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Report {
  id           String @id @unique @default(uuid())
  reporter     String
  phoneNumber  String
  childName    String
  childAddress String
  observation  String
  gender       Gender

  userId             String
  user               User    @relation(fields: [userId], references: [id])
  fileChildPictureId String?
  fileChildPicture   File?   @relation("FileChildPicture", fields: [fileChildPictureId], references: [id])
  fileHousePictureId String?
  fileHousePicture   File?   @relation("FileHousePicture", fields: [fileHousePictureId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model HealthPost {
  id      String @id @unique @default(uuid())
  name    String
  address String

  subDistrictId String
  subDistrict   SubDistrict @relation(fields: [subDistrictId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  admin           Admin[]
  checkupElderly  CheckupElderly[]
  schedule        Schedule[]
  checkupMother   CheckupMother[]
  checkupChildren CheckupChildren[]
}

model Schedule {
  id      String   @id @unique @default(uuid())
  startAt DateTime
  endAt   DateTime
  address String
  note    String?

  staffId      String
  staff        Admin      @relation(fields: [staffId], references: [id])
  healthPostId String
  healthPost   HealthPost @relation(fields: [healthPostId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model SubDistrict {
  id   String @id @unique @default(uuid())
  name String

  districtId String
  district   District @relation(fields: [districtId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  healthPost HealthPost[]
  mother     Mother[]
}

model District {
  id   String @id @unique @default(uuid())
  name String

  regencyId String
  regency   Regency @relation(fields: [regencyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subDistrict SubDistrict[]
}

model Regency {
  id   String @id @unique @default(uuid())
  name String

  provinceId String
  province   Province @relation(fields: [provinceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  district District[]
}

model Province {
  id   String @id @unique @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  regency Regency[]
}

model File {
  id       String   @id @unique @default(uuid())
  fileName String
  path     String
  mimeType String
  size     Int
  type     FileType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user             User[]
  childPicture     Children[]        @relation("ChildPicture")
  birthCertificate Children[]        @relation("BirthCertificate")
  kiaCard          Children[]        @relation("KiaCard")
  familyCard       Children[]        @relation("FamilyCard")
  checkupMother    CheckupMother[]   @relation("FileDiagnosedMother")
  checkupChildren  CheckupChildren[] @relation("FileDiagnosedChildren")
  fileChildPicture Report[]          @relation("FileChildPicture")
  fileHousePicture Report[]          @relation("FileHousePicture")
  article          Article[]         @relation("ArticlePicture")
}

model Otp {
  id  String @id @unique @default(uuid())
  otp String

  userId  String?
  user    User?   @relation(fields: [userId], references: [id])
  adminId String?
  admin   Admin?  @relation(fields: [adminId], references: [id])

  createdAt  DateTime @default(now())
  expiresAt  DateTime
  isVerified Boolean  @default(false)
}
